#!/usr/bin/env bash
#
# oneshot :: run a command on remote hosts
# requires: bash 4.0+, ssh, sed

trap 'echo -e "\nSIGINT Received... exiting"; exit 130' SIGINT

err() {
  # send errors standard error
  echo "[${0##*/}] error: $*" >&2
}

warn() {
  # send warnings to standard error
  echo "[${0##*/}] warning: $*" >&2
}

show_help() {
  # help option text
  echo "Usage: ${0##*/} [OPTION]... FILE \"COMMAND\""
  echo "Options:"
  echo "  -h, --help    Show this help menu"
  echo "  -a            Show output in 'view' format, with line-breaks"
  echo "  -c            Show output in CSV format HOSTNAME,OUTPUT"
  echo "  -t            Conduct a ssh connection test against FILE"
  echo "  -u USER       Specify SSH username"
}

_parse_options_prevent_me() {
  # called in parse_options()
  # prevents mutually exclusive options from being requested in the same command
  #
  # REQ: mutually_exclusive_options

  if [[ -n "$mutually_exclusive_options" ]]; then
    err "Conflicting options (-a), (-c), and/or (-t) used."
    echo "---"
    show_help
    return 1
  fi
}

_parse_options() {
  # check for long "--help"
  if [[ "$1" == "--help" ]]; then
    show_help
    showed_help="1"
    return 0
  fi

  # set a local variable, mutually_exclusive_options,
  # that prevents mutually exclusive options;
  # use with _parse_options_prevent_me function
  # showed_help, format_style, username, host_file - must be declared in main
  local opt="" mutually_exclusive_options=""
  while getopts ":hactu:" opt; do
    case "$opt" in
      h)
        show_help
        showed_help="1"
        return 0
        ;;
      a)
        _parse_options_prevent_me
        mutually_exclusive_options="1"
        format_style="1"
        ;;
      c)
        _parse_options_prevent_me
        mutually_exclusive_options="1"
        format_style="2"
        ;;
      t)
        _parse_options_prevent_me
        mutually_exclusive_options="1"
        format_style="3"
        ;;
      u) username="$OPTARG" ;;
      :)
        err "option -$OPTARG requires an argument"
        return 1
        ;;
      \?)
        err "Invalid option: -$OPTARG"
        show_help
        return 1
        ;;
    esac
  done
}

hostfile_to_array() {
  # convert each line in a file to an array element
  # skip lines that start with # or [, skip blank lines
  # trim leading and trailing whitespace
  #
  # ARG $1: filename of hostlist
  # RET: prints lines that represent valid hostnames

  sed -E '/^[#\[]|^$/d; s/^[[:space:]]+|[[:space:]]+$//g' "$1"
}

_oneshot_run_zero() {
  # neither -a or -c options, just stdout
  #
  # REQ: host_array()
  # REQ: cmd_array()
  # REQ: username

  local host="" cmd_output=""
  for host in "${host_array[@]}"; do
    if cmd_output=$(ssh -nq -o StrictHostKeyChecking=accept-new \
                        -o PasswordAuthentication=no -o ConnectTimeout=10 \
                        "$username"@"$host" "${cmd_array[@]}"); then
      echo "$cmd_output"
    else
      err "Connection to $host failed"
    fi
  done
}

_oneshot_run_one() {
  # -a option, hostname and then a line break, extra blank line at end
  #
  # REQ: host_array()
  # REQ: cmd_array()
  # REQ: username

  local host="" cmd_output=""
  for host in "${host_array[@]}"; do
    echo "${host}:"
    if cmd_output=$(ssh -nq -o StrictHostKeyChecking=accept-new \
                        -o PasswordAuthentication=no -o ConnectTimeout=10 \
                        "$username"@"$host" "${cmd_array[@]}"); then
      echo "$cmd_output"
    else
      echo "Connection to $host failed"
    fi
    echo ""
  done
}

_oneshot_run_two() {
  # -c option, csv format: {hostname},{stdout}
  #
  # REQ: host_array()
  # REQ: cmd_array()
  # REQ: username

  local host="" cmd_output=""
  echo "hostname,output"
  for host in "${host_array[@]}"; do
    echo -n "${host},"
    if cmd_output=$(ssh -nq -o StrictHostKeyChecking=accept-new \
                        -o PasswordAuthentication=no -o ConnectTimeout=10 \
                        "$username"@"$host" "${cmd_array[@]}"); then
      echo "$cmd_output"
    else
      echo "Connection failed"
    fi
  done
}

_oneshot_run_test() {
  # -t option, test connectivity to hosts in hostfile
  #
  # REQ: host_array()
  # REQ: username

  local host="" cmd_output=""
  for host in "${host_array[@]}"; do
    if ! cmd_output=$(ssh -n -o StrictHostKeyChecking=accept-new \
                          -o PasswordAuthentication=no -o ConnectTimeout=10 \
                          "$username"@"$host" "true" 2>&1); then
      echo "$host failed with error -> $cmd_output"
      echo ""
    fi
  done
}

main() {
  set -eu

  # define variables that can be assigned in _parse_options
  local showed_help="" format_style="0" username="$USER" host_file=""
  if [[ $# -gt 0 ]]; then
    _parse_options "$@"
    [[ -n "$showed_help" ]] && exit 0
  else
    show_help
    exit 1
  fi
  shift $((OPTIND - 1)) # shift $@ past optional flags

  local -a cmd_array=()
  # for non-test formats, where $format_style=0,1,2 -- check & prepare variables
  if [[ "$format_style" -ne 3 ]]; then
    if [[ $# -eq 2 ]]; then
      # if correct number of arguments, set $1 to $host_file
      host_file="$1"
      # set command array to be used from $2
      cmd_array=("${@:2}" "2>&1" "||" "true")
    else
      # if incorrect number of arguments, error and exit
      err "two arguments are required: HOSTFILE \"COMMAND\""
      echo "---"
      show_help
      exit 1
    fi
  else
    # if test format used set command array to be used (static)
    if [[ $# -ge 1 ]]; then
      host_file="$1"
      cmd_array=("true" "2>&1" "||" "true")
      # we're ignoring any commands the user inputs here, so warn if occurs
      [[ $# -gt 1 ]] && warn "-t option used, any command entered is ignored"
    fi
  fi

  # validate host_file is readable
  # host_file has either been set to $1 or assigned by -t at this point
  if ! [[ -r "$host_file" ]]; then
    err "$host_file not found; please validate hostfile path"
    exit 1
  fi

  local -a host_array=()
  # place the hostfile into an array, parsing using hostfile_to_array function
  readarray -t host_array < <(hostfile_to_array "$host_file")

  # adhere to format style chosen, and use ssh to run command(s) on remote hosts
  case "$format_style" in
    # neither -a or -c options used, just stdout
    0) _oneshot_run_zero ;;
    # -a, hostname and then a line break, extra blank line at end
    1) _oneshot_run_one ;;
    # -c, csv format: $hostname,$stdout
    2) _oneshot_run_two ;;
    # -t, test connections
    3) _oneshot_run_test ;;
  esac
}

main "$@"
