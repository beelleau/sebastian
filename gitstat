#!/usr/bin/env bash
#
# gitstat :: find git repos and print git status
# requires: bash 4.0+, git, find, sort

trap 'echo -e "\nSIGINT Received... exiting"; exit 130' SIGINT

# set constants
readonly MAGENTA="\033[0;35m"
readonly RESET="\033[0m"

err() {
  # send errors to standard error
  echo "[${0##*/}] error: $*" >&2
}

warn() {
  # send warnings to standard error
  echo "[${0##*/}] warning: $*" >&2
}

show_help() {
  # help option text
  echo "Usage: ${0##*/} [OPTION]..."
  echo "Options:"
  echo "  -h, --help    Show this help menu"
  echo "  -d DIR        Specify the top level directory to search from"
  echo "  -i DIR        Ignore a specific directory from results (repeatable)"
  echo "  -l            Only list git repos, and skip default action"
}

_parse_options() {
  # parse arguments and assign variables, arrays

  # check for long "--help"
  if [[ "$1" == "--help" ]]; then
    show_help
    showed_help="1"
    return 0
  fi

  # showed_help, top_dir, opt_list, and exluded_dirs() must be declared in main
  local opt=""
  while getopts ":hd:i:l" opt; do
    case "$opt" in
      h)
        show_help
        showed_help="1"
        return 0
        ;;
      d)
        top_dir="$OPTARG"
        if ! [[ -d "$top_dir" ]]; then
          err "directory not found \"${top_dir}\""
          echo
          return 1
        fi
        ;;
      i)
        # strip trailing '/' from the argument if present
        local str_strip
        str_strip="${OPTARG%/}"
        ! [[ "$str_strip" =~ ^(/|\.\.?/) ]] && str_strip="$PWD/$str_strip"
        excluded_dirs+=("$str_strip")
        ;;
      l) opt_list="1" ;;
      :)
        err "option -$OPTARG requires an argument"
        return 1
        ;;
      \?)
        err "Invalid option: -$OPTARG"
        show_help
        return 1
        ;;
    esac
  done
}

gather_git_repos() {
  # find all .git repositories under $1 path and place them into an array
  #
  # ARG $1: top-level directory
  # RET: all accessible directories that contain a .git sub-directory (-> array)

  local git_dirs=""
  readarray -t git_dirs < \
            <(find "$1" -type d -name ".git" 2>/dev/null | sort)

  local _dir=""
  # strip the '.git' from each path now
  for _dir in "${git_dirs[@]}"; do
    echo "${_dir%/\.git}"
  done
}

validate_excluded_dirs() {
  # check excluded directories and remove if non-valid
  #
  # ARG $@: array of user specified excluded directories
  # RET: valid excluded directories (-> array)

  local _dir=""
  for _dir in "$@"; do
    if [[ -d "$_dir" ]]; then
      echo "$_dir"
    elif ! [[ -d "$_dir" ]]; then
      warn "directory not found \"${_dir}\" ..."
    fi
  done
}

_remove_validated_excluded_dirs() {
  # removes directories named in -i option from git_repos
  #
  # REQ: $valid_excluded_dirs
  # REQ: $git_repos()

  local _dir=""
  # Iterate over git_repos
  for _dir in "${valid_excluded_dirs[@]}"; do
    # shellcheck disable=SC2206
    git_repos=(${git_repos[@]/${_dir}*})
  done
}

print_array() {
  # iterate through an array and print each element on a newline
  #
  # ARG $1: array

  local i=""
  for i in "$@"; do
    echo "$i"
  done
}

gitstat_run() {
  # iterate through found git repos and print their git status
  #
  # ARG $1: array of git repo directories

  local repo=""
  for repo in "$@"; do
    echo -n "-- "
    echo -e "${MAGENTA}$repo${RESET}"
    cd "$repo"
    git status
    echo -e "\n"
    cd - 1>/dev/null
  done
}

main() {
  set -eu
  set -o pipefail

  # define variables that can be assigned in _parse_options, (w/ defaults)
  local showed_help="" opt_list="" top_dir="${top_dir:-$PWD}"
  local -a excluded_dirs=()
  if [[ $# -gt 0 ]]; then
    _parse_options "$@"
    [[ -n "$showed_help" ]] && exit 0
  fi

  local -a git_repos=()
  # fetch the git repositories and assign to git_repos
  readarray -t git_repos < <(gather_git_repos "$top_dir")

  local -a valid_excluded_dirs=()
  # validate excluded_dirs array, removing invalid arguments
  readarray -t valid_excluded_dirs < \
            <(validate_excluded_dirs "${excluded_dirs[@]}")

  # remove excluded directories from git_repos
  # git_repos - checked_excluded_dirs = git_repos
  _remove_validated_excluded_dirs

  # run list output if specified
  if [[ -n "$opt_list" ]]; then
    print_array "${git_repos[@]}" && exit 0
  fi
  # run primary output
  gitstat_run "${git_repos[@]}"
}

main "$@"
